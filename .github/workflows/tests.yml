name: Test with Redis and Pytest

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=5
      prometheus:
        image: prom/prometheus:latest
        ports:
          - 9090:9090
        options: >-
          --health-cmd="wget -q -O- http://localhost:9090/-/healthy"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=5

      jaeger:
        image: jaegertracing/all-in-one:latest
        ports:
          - 16686:16686  # UI
          - 14268:14268  # HTTP collector
          - 14250:14250  # GRPC collector

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.0'

      # Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
      
      # Install dependencies using Poetry
      - name: Install dependencies
        run: |
          poetry install

      # - name: Install Redis CLI
      #   run: sudo apt-get update && sudo apt-get install -y redis-tools

      - name: Wait for services to be ready
        run: |
          echo "Waiting for all services to become available..." 
          # until redis-cli -h redis -p 6379 ping; do sleep 1; done
          until curl -f http://localhost:9090/-/healthy; do sleep 1; done
          until curl -f http://localhost:16686; do sleep 1; done

      # Run pytest inside the virtual environment
      - name: Run tests with pytest
        # env:
        #   REDIS_URL: redis://localhost:6379/0
        run: |
          source $(poetry env info --path)/bin/activate
          poetry run pytest --maxfail=1 --disable-warnings -q

      # Optionally: Store test results
      # - name: Upload test results
      #   if: always()
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: pytest-results
      #     path: pytest-results.xml
